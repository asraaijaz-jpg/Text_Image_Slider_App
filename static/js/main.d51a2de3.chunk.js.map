{"version":3,"sources":["../node_modules/h8k-components/dist/esm-es5 lazy /^/.*/.entry/.js$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","components/Slides.js","App.js","registerServiceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Slides","props","React","useState","index","setActiveStep","stopping","length","className","data-testid","onClick","disabled","prevActiveStep","slides","title","text","App","allslides","header","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","applyPolyfills","defineCustomElements"],"mappings":"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","file":"static/js/main.d51a2de3.chunk.js","sourcesContent":["var map = {\n\t\"./h8k-logo_2.entry.js\": [\n\t\t18,\n\t\t2\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 13;\nmodule.exports = webpackAsyncContext;","import React from 'react';\n\nfunction Slides(props) {\n\n  const [index, setActiveStep] = React.useState(0);\n  const stopping=props.length;\n//   alert(stopping);\n  function restart()\n  {\nsetActiveStep(0);\n  }\n  function next()\n  {\nsetActiveStep((prevActiveStep) => prevActiveStep + 1);\n  }\n  function prev()\n  {\nsetActiveStep((prevActiveStep) => prevActiveStep - 1);\n  }\n    return (\n        <div>\n            <div id=\"navigation\" className=\"text-center\">\n                <button data-testid=\"button-restart\" className=\"small outlined\" onClick={restart} disabled={index==0}>Restart</button>\n                <button data-testid=\"button-prev\" className=\"small\" onClick={prev} disabled={index==0}>Prev</button>\n                <button data-testid=\"button-next\" className=\"small\" onClick={next} disabled={index+1==stopping}>Next</button>\n            </div>\n            <div id=\"slide\" className=\"card text-center\">\n                <h1 data-testid=\"title\">{props.slides[index].title}</h1>\n                <p data-testid=\"text\">{props.slides[index].text}</p>\n            </div>\n        </div>\n    );\n\n}\n\nexport default Slides;\n","import React from 'react';\nimport './App.css';\nimport 'h8k-components';\n\nimport Slides from './components/Slides';\nconst title = \"Slideshow App\";\n\n\nfunction App({slides}) {\n  var allslides=[\n    {\n     title:'Todays workout plan',\n     text:'create a baisc slideshow app'\n    },\n   {\n     title:'10 push-up',\n     text:'make your life more energetic'\n    },\n    {\n     title:'Joggings',\n     text:'think before you leave'\n    },\n    {\n     title:'gyming',\n     text:'once passed never come again'\n    }\n  ]\n\n  // alert(allslides.length);\n    return (\n        <div>\n            <h8k-navbar header={title}></h8k-navbar>\n            <div className=\"App\">\n                <Slides slides={allslides} length={allslides.length} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport {applyPolyfills, defineCustomElements} from 'h8k-components/loader';\n\nconst SLIDES = [\n    {\n        title: \"Today's workout plan\",\n        text: \"We're gonna do 3 fundamental exercises.\"\n    },\n    {\n        title: \"First, 10 push-ups\",\n        text: \"Do 10 reps. Remember about full range of motion. Don't rush.\"\n    },\n    {\n        title: \"Next, 20 squats\",\n        text: \"Squats are important. Remember to keep your back straight.\"\n    },\n    {\n        title: \"Finally, 15 sit-ups\",\n        text: \"Slightly bend your knees. Remember about full range of motion.\"\n    },\n    {\n        title: \"Great job!\",\n        text: \"You made it, have a nice day and see you next time!\"\n    }\n];\n\nReactDOM.render(<App slides={SLIDES} />, document.getElementById('root'));\nregisterServiceWorker();\n\napplyPolyfills().then(() => {\n    defineCustomElements(window);\n})\n"],"sourceRoot":""}